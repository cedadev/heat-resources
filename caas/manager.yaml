#####
## Template for a Cluster-as-a-Service management machine running AWX
#####

heat_template_version: 2016-04-08


parameters:
  name:
    type: string
    label: The server name

  # This should be set automatically by environment.yaml
  image:
    type: string
    label: The image to use (must be CentOS 7)
    constraints:
      - custom_constraint: glance.image

  flavor:
    type: string
    label: Flavor to use
    constraints:
      - custom_constraint: nova.flavor

  key_name:
    type: string
    label: SSH key pair for access
    constraints:
      - custom_constraint: nova.keypair

  network:
    type: string
    label: Private network to use
    constraints:
      - custom_constraint: neutron.network

  root_volume_size:
    type: number
    label: Size of volume for root filesystem
    default: 40

  floating_ip:
    type: string
    label: Floating IP to use


resources:
  server:
    type: JASMIN::Base::Server
    properties:
      name: { get_param: name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      network: { get_param: network }
      root_volume_size: { get_param: root_volume_size }

  fip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_param: floating_ip }
      port_id: { get_attr: [server, addresses, { get_param: network }, 0, port] }

  config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: awx_admin_password
      config: |
        #!/bin/bash
        yum install -y git
        git clone https://github.com/cedadev/awx-playbook.git /opt/awx-playbook
        ansible-playbook -c local -i 127.0.0.1, -e "awx_admin_password=$awx_admin_password" /opt/awx-playbook/playbook.yml

  admin_password:
    type: OS::Heat::RandomString
    properties:
      length: 32

  deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: HEAT_SIGNAL
      config: { get_resource: config }
      server: { get_attr: [server, server_id] }
      input_values:
        awx_admin_password: { get_attr: [admin_password, value] }


outputs:
  server_id:
    value: { get_attr: [server, server_id] }
  admin_password:
    value: { get_attr: [admin_password, value] }
