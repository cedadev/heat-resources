#####
## Template for a Kubernetes master
#####

heat_template_version: 2016-04-08


parameters:
  name:
    type: string
    label: The server name

  # This should be set automatically by using environment.yaml
  image:
    type: string
    label: The image to use (must be CentOS 7)
    constraints:
      - custom_constraint: glance.image

  flavor:
    type: string
    label: Flavor to use
    constraints:
      - custom_constraint: nova.flavor

  key_name:
    type: string
    label: SSH key pair for access
    constraints:
      - custom_constraint: nova.keypair

  network:
    type: string
    label: Private network to use
    constraints:
      - custom_constraint: neutron.network

  root_volume_size:
    type: number
    label: Size of volume for root filesystem
    default: 20

  # This should be set automatically by using environment.yaml
  k8s_ansible_version:
    type: string
    label: The version of the k8s-ansible playbook to use

  # This should be set automatically by using environment.yaml
  kubernetes_version:
    type: string
    label: The Kubernetes version to deploy


resources:
  kubeadm:
    type: JASMIN::Kubernetes::Kubeadm
    properties:
      server: { get_attr: [server, server] }
      kubernetes_version: { get_param: kubernetes_version }
      role: master

  fetch_outputs_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
        - name: kubeconfig
        - name: kubeadm_token
      config: |
        #!/bin/bash
        set -euxo pipefail
        cp /etc/kubernetes/admin.conf "${heat_outputs_path}.kubeconfig"
        kubeadm token list | head -n 2 | tail -n 1 | awk '{ print $1 };' > "${heat_outputs_path}.kubeadm_token"

  fetch_outputs_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: kubeadm
    properties:
      signal_transport: HEAT_SIGNAL
      config: { get_resource: fetch_outputs_config }
      server: { get_attr: [server, server] }

  server:
    type: JASMIN::Kubernetes::Server
    properties:
      name: { get_param: name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      network: { get_param: network }
      root_volume_size: { get_param: root_volume_size }
      k8s_ansible_version: { get_param: k8s_ansible_version }


outputs:
  server:
    value: { get_attr: [server, server] }

  accessIPv4:
    value: { get_attr: [server, accessIPv4] }

  accessIPv6:
    value: { get_attr: [server, accessIPv6] }

  addresses:
    value: { get_attr: [server, addresses] }

  console_urls:
    value: { get_attr: [server, console_urls] }

  instance_name:
    value: { get_attr: [server, instance_name] }

  name:
    value: { get_attr: [server, name] }

  networks:
    value: { get_attr: [server, networks] }

  show:
    value: { get_attr: [server, show] }

  kubeconfig:
    value: { get_attr: [fetch_outputs_deployment, kubeconfig] }

  kubeadm_token:
    value: { get_attr: [fetch_outputs_deployment, kubeadm_token] }
